You are creating a notebook application. Your task is to implement the AWS Lambda function that will perform basic authentication and return the notes of the authenticated user. The notes and authentication data are stored in DynamoDB tables. The lambda function is later exposed through the API Gateway and serves as an HTTP request handler. Runtime for this Lambda handler is Python 3.8.

Notes

The DynamoDB table holding notes is named user-notes. Each note has the following attributes:
* id, which is a UUID v4
* user, which is an owner's email
* create_date, which is a creation date, stored as a string in ISO_8601 format
* text, which holds actual note content.

Example table rows

user                create_date             text            id
test@example.com    2819-01-81117:42:342    Sample note     481ee6ce-1818-42eb-acfe-20096e34a168
john@doe.com        2019-01-02T17:42:342    Another note    26279956-e2ad-4c78-9176-a5a5b7820bad

Database keys and indexes
The table consists of a Partition key (user) and a Sort key (create_date).

Authentication
The DynamoDB table holding the authentication data is named token-email-lookup. The table has two fields: token and email. Each authentication token maps to the email of the user owning the given token. The table has a Partition key on the token field.

Example table rows:
Email   Token
test@example.com    25d73ffca742
john@doe.com        6579e96f76ba

Authentication header
Tokens are passed to the lambda through the Authentication HTTP request header. The headers are available in the event, headers object. The Authentication header value takes the searer TOKEN format.
To query the user-notes table with the user email, you should get it from token-email-lookup once, reading the token from the HTTP request.

Current Lambda code in Python
import json
import re

import boto3
from boto3.dynamodb.conditions import Key


class InvalidResponse(Exception):
    def __init__(self, status_code):
        self.status_code = status_code


# Don't modify this function name and arguments
def query_user_notes(user_email):
    dynamo_db = boto3.resource('dynamodb')
    user_notes_table = dynamo_db.Table('user-notes')
    result = user_notes_table.query(
       # ...
    )

    return ""


# Don't modify this function name and arguments
def get_authenticated_user_email(token):
    dynamo_db = boto3.resource('dynamodb')
    tokens_table = dynamo_db.Table('token-email-lookup')

    # Validate the given token with one from the database
    response = tokens_table.get_item(
        # ...
    )
    # and return user email if the tokens match ...
    return ""


def authenticate_user(headers):
    authentication_header = headers['Authentication']

    # Validate the Authentication header

    user_email = get_authenticated_user_email(token)

    return user_email


def build_response(status_code, body=None):
    result = {
        'statusCode': str(status_code),
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
        },
    }
    if body is not None:
        result['body'] = body

    return result


# Don't modify handler, make other functions feet it
def handler(event: dict, context):
    try:
        user_email = authenticate_user(event['headers'])
        notes = query_user_notes(user_email)
    except InvalidResponse as e:
        return build_response(status_code=e.status_code)
    else:
        return build_response(
            status_code=200,
            body=json.dumps(notes)
        )


Requirements
Your task is to finish the implementation of the given lambda function. The function should:
* return the user notes sorted by the create_date attribute (in descending order)
* return a maximum of 10 notes per query
* return an error (status 403) if token is invalid or empty (Bearer)
* return an error (status 400) if the Authentication header is malformed or missing.

You can focus on returning the notes first and sort them later, the operations are scored separately.

Technical notes
* Due to how tests are built do not modify names or arguments of handler, get_authenticated_user_email and query_user_notes functions. Of course, you can add new functions.
* For querying DynamoDB please use specified functions, all you need to do is to pass arguments to query or get_item methods form Table class. You can look up their definitions in the official AWS Python DynamoDB SDK documentation.
* To return invalid status you can raise an InvalidResponse exception.